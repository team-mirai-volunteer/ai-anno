using NUnit.Framework;
using System;
using System.Collections;
using System.Threading;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.TestTools;
using AiTuber.Services.Legacy.Dify;
using AiTuber.Services.Legacy.Dify.Audio;
using AiTuber.Services.Legacy.Dify.Data;
using AiTuber.Tests.Dify;

namespace AiTuber.Editor.Tests
{
    /// <summary>
    /// DifyServiceのIDifyEventService実装テスト
    /// Infrastructure LayerからApplication Layerへのイベント配信統合テスト
    /// </summary>
    [TestFixture]
    public class DifyServiceEventIntegrationTests
    {
        private DifyServiceConfig _config;
        private DifyService _difyService;
        private bool _audioEventReceived;
        private bool _textEventReceived;
        private bool _workflowEventReceived;
        private DifyStreamEvent _receivedAudioEvent;
        private DifyStreamEvent _receivedTextEvent;
        private DifyStreamEvent _receivedWorkflowEvent;
        
        [SetUp]
        public void Setup()
        {
            _config = new DifyServiceConfig
            {
                ApiKey = "test-api-key-12345678",
                ApiUrl = "https://test-api.com",
                EnableDebugLogging = true,
                EnableAudioProcessing = true
            };
            
            // 既存のMockDifyApiClientクラスを使用
            var mockApiClient = new MockDifyApiClient
            {
                ApiKey = _config.ApiKey,
                ApiUrl = _config.ApiUrl,
                ShouldThrowException = false,
                ShouldReturnError = false
            };
            // テスト用音声データを設定
            mockApiClient._mockAudioData = new byte[] { 1, 2, 3, 4, 5 };
            
            _difyService = new DifyService(mockApiClient, _config);
            
            _audioEventReceived = false;
            _textEventReceived = false;
            _workflowEventReceived = false;
            _receivedAudioEvent = null;
            _receivedTextEvent = null;
            _receivedWorkflowEvent = null;
        }
        
        [TearDown]
        public void TearDown()
        {
            _difyService = null;
        }
        
        [Test]
        public void DifyService_IDifyEventServiceインターフェース実装_正しく継承されている()
        {
            // Assert
            Assert.IsTrue(_difyService is IDifyEventService, "DifyServiceがIDifyEventServiceを実装していること");
            Assert.IsNotNull(_difyService as IDifyEventService, "IDifyEventServiceとしてキャスト可能であること");
        }
        
        [UnityTest]
        public IEnumerator ProcessUserQueryAsync_TTSメッセージ_OnAudioMessageイベント発火()
        {
            // Arrange
            _difyService.OnAudioMessage += (audioEvent) =>
            {
                _audioEventReceived = true;
                _receivedAudioEvent = audioEvent;
            };
            
            // Act
            var task = _difyService.ProcessUserQueryAsync("test query", "user-123", conversationId: null, onStreamEvent: null, CancellationToken.None);
            
            // Wait for completion
            while (!task.IsCompleted)
            {
                yield return null;
            }
            
            var result = task.Result;
            
            // Assert
            Assert.IsTrue(result.IsSuccess, "処理が成功すること");
            Assert.IsTrue(_audioEventReceived, "OnAudioMessageイベントが発火されること");
            Assert.IsNotNull(_receivedAudioEvent, "音声イベントデータが正しく渡されること");
            Assert.AreEqual("tts_message", _receivedAudioEvent.@event, "イベントタイプが正しく渡されること");
            Assert.IsNotNull(_receivedAudioEvent.audio, "音声データが含まれること");
        }
        
        [UnityTest]
        public IEnumerator ProcessUserQueryAsync_テキストメッセージ_OnTextMessageイベント発火()
        {
            // Arrange
            _difyService.OnTextMessage += (textEvent) =>
            {
                _textEventReceived = true;
                _receivedTextEvent = textEvent;
            };
            
            // Act
            var task = _difyService.ProcessUserQueryAsync("test query", "user-123", conversationId: null, onStreamEvent: null, CancellationToken.None);
            
            // Wait for completion
            while (!task.IsCompleted)
            {
                yield return null;
            }
            
            var result = task.Result;
            
            // Assert
            Assert.IsTrue(result.IsSuccess, "処理が成功すること");
            // MockDifyApiClientのデフォルト動作に依存
        }
        
        [UnityTest]
        public IEnumerator ProcessUserQueryAsync_ワークフロー完了_OnWorkflowFinishedイベント発火()
        {
            // Arrange
            _difyService.OnWorkflowFinished += (workflowEvent) =>
            {
                _workflowEventReceived = true;
                _receivedWorkflowEvent = workflowEvent;
            };
            
            // Act
            var task = _difyService.ProcessUserQueryAsync("test query", "user-123", conversationId: null, onStreamEvent: null, CancellationToken.None);
            
            // Wait for completion
            while (!task.IsCompleted)
            {
                yield return null;
            }
            
            var result = task.Result;
            
            // Assert
            Assert.IsTrue(result.IsSuccess, "処理が成功すること");
            // MockDifyApiClientのデフォルト動作に依存
        }
        
        [UnityTest]
        public IEnumerator ProcessUserQueryAsync_複数イベント混在_全イベントタイプ正しく配信()
        {
            // Arrange
            int audioCount = 0, textCount = 0, workflowCount = 0;
            
            _difyService.OnAudioMessage += (audioEvent) => audioCount++;
            _difyService.OnTextMessage += (textEvent) => textCount++;
            _difyService.OnWorkflowFinished += (workflowEvent) => workflowCount++;
            
            // Act
            var task = _difyService.ProcessUserQueryAsync("test query", "user-123", conversationId: null, onStreamEvent: null, CancellationToken.None);
            
            // Wait for completion
            while (!task.IsCompleted)
            {
                yield return null;
            }
            
            var result = task.Result;
            
            // Assert
            Assert.IsTrue(result.IsSuccess, "処理が成功すること");
            // MockDifyApiClientのデフォルト動作に応じてイベント数が決まる
            Assert.IsTrue(audioCount >= 0, "音声イベントが処理されること");
            Assert.IsTrue(textCount >= 0, "テキストイベントが処理されること");
        }
        
        [UnityTest]
        public IEnumerator ProcessUserQueryAsync_APIエラー時_イベント発火されない()
        {
            // Arrange
            var mockApiClient = new MockDifyApiClient
            {
                ApiKey = _config.ApiKey,
                ApiUrl = _config.ApiUrl,
                ShouldThrowException = false,
                ShouldReturnError = true // エラーを返すように設定
            };
            _difyService = new DifyService(mockApiClient, _config);
            
            _difyService.OnAudioMessage += (audioEvent) => _audioEventReceived = true;
            _difyService.OnTextMessage += (textEvent) => _textEventReceived = true;
            _difyService.OnWorkflowFinished += (workflowEvent) => _workflowEventReceived = true;
            
            // Act
            var task = _difyService.ProcessUserQueryAsync("test query", "user-123", conversationId: null, onStreamEvent: null, CancellationToken.None);
            
            // Wait for completion
            while (!task.IsCompleted)
            {
                yield return null;
            }
            
            var result = task.Result;
            
            // Assert
            Assert.IsFalse(result.IsSuccess, "エラー時は処理が失敗すること");
        }
        
        [UnityTest]
        public IEnumerator ProcessUserQueryAsync_既存コールバックと併用_両方正しく動作()
        {
            // Arrange
            bool callbackReceived = false;
            DifyStreamEvent callbackEvent = null;
            
            _difyService.OnTextMessage += (textEvent) =>
            {
                _textEventReceived = true;
                _receivedTextEvent = textEvent;
            };
            
            // Act
            var task = _difyService.ProcessUserQueryAsync(
                "test query", 
                "user-123", 
                conversationId: null,
                onStreamEvent: (evt) => 
                {
                    callbackReceived = true;
                    callbackEvent = evt;
                },
                CancellationToken.None);
            
            // Wait for completion
            while (!task.IsCompleted)
            {
                yield return null;
            }
            
            var result = task.Result;
            
            // Assert
            Assert.IsTrue(result.IsSuccess, "処理が成功すること");
            Assert.IsTrue(callbackReceived, "既存コールバックも動作すること");
        }
    }
}